#!/bin/bash

# Check for input (package name)
if [ -z "$1" ]; then
    echo "Usage: $0 <package_name>"
    echo "Example: $0 shadow"
    exit 1
fi

PACKAGE_NAME="$1"
#BASE_URL="https://www.linuxfromscratch.org/blfs/view/stable"
BASE_URL="https://www.linuxfromscratch.org/blfs/view/svn/"
OUTPUT_FILE=$PWD/"spkgbuild"
TEMP_FILE=$(mktemp)
DEBUG_LOG="/var/cache/scratchpkg/logs/spkgbuild_debug.log"

echo "Debug log for package $PACKAGE_NAME - $(date)" > "$DEBUG_LOG"

# Find package URL dynamically
get_url() {
    local pkg="$1"
    local sections=("postlfs" "general" "server" "multimedia" "x" "basicnet" "security")
    for section in "${sections[@]}"; do
        local url="$BASE_URL/$section/$pkg.html"
        if curl -s -I "$url" | grep -q "200 OK"; then
            echo "$url"
            return 0
        fi
    done
    echo "Error: Could not find package '$pkg' in BLFS stable branch" | tee -a "$DEBUG_LOG"
    rm "$TEMP_FILE"
    exit 1
}

PAGE_URL=$(get_url "$PACKAGE_NAME")
echo "Found URL: $PAGE_URL" >> "$DEBUG_LOG"

extract_package_info() {
    local page_url="$1"
    local output_file="$2"

    # Fetch page
    if ! curl -s "$page_url" > "$TEMP_FILE"; then
        echo "Error: Failed to fetch page $page_url" | tee -a "$DEBUG_LOG"
        rm "$TEMP_FILE"
        exit 1
    fi

    # Extract package info from <title>
    PACKAGE_INFO=$(xmllint --html --recover --xpath '//title/text()' "$TEMP_FILE" 2>/dev/null | sed -e 's/\s*-\s*BLFS.*//' -e 's/^[ \t]*//;s/[ \t]*$//' | tr -d '\n')
    echo "Raw TITLE: $(xmllint --html --recover --xpath '//title/text()' "$TEMP_FILE" 2>/dev/null)" >> "$DEBUG_LOG"

    if [ -z "$PACKAGE_INFO" ] || [ "$PACKAGE_INFO" = "<title>" ]; then
        PACKAGE_INFO=$(grep "<title>" "$TEMP_FILE" | head -n1 | sed -e 's/.*<title>\s*\([^<]*\)\s*-\{0,1\}\s*\([0-9][0-9.]*[0-9]\)\{0,1\}\s*- BLFS.*<\/title>.*/\1/' -e 's/^[ \t]*//;s/[ \t]*$//')
        echo "Fallback TITLE: $(grep "<title>" "$TEMP_FILE" | head -n 1)" >> "$DEBUG_LOG"
    fi

    echo "PACKAGE_INFO: $PACKAGE_INFO" >> "$DEBUG_LOG"

    if [ -z "$PACKAGE_INFO" ]; then
        echo "Error: Could not extract package info from $page_url" | tee -a "$DEBUG_LOG"
        rm "$TEMP_FILE"
        exit 1
    fi

    # Split name and version
    NAME=$(echo "$PACKAGE_INFO" | sed -e 's/-[0-9][0-9.]*[0-9]$//' | tr '[:upper:]' '[:lower:]' | tr -d '\n' | sed -e 's/^[ \t]*//;s/[ \t]*$//')
    VERSION=$(echo "$PACKAGE_INFO" | sed -n 's/.*-\([0-9][0-9.]*[0-9]\)/\1/p' | tr -d '\n' | sed -e 's/^[ \t]*//;s/[ \t]*$//')

    echo "NAME: $NAME" >> "$DEBUG_LOG"
    echo "VERSION: $VERSION" >> "$DEBUG_LOG"

    if [ -z "$NAME" ] || [ -z "$VERSION" ]; then
        echo "Error: Failed to parse name or version from '$PACKAGE_INFO'" | tee -a "$DEBUG_LOG"
        rm "$TEMP_FILE"
        exit 1
    fi

    # Extract description (first paragraph inside div.package)
    DESCRIPTION=$(xmllint --html --recover --xpath 'string((//div[@class="package"]/p)[1])' "$TEMP_FILE" 2>/dev/null | sed -e 's/^[ \t]*//;s/[ \t]*$//' -e 's/"/\\"/g')
    DESCRIPTION=$(echo "$DESCRIPTION" | tr '\n' ' ' | sed -E 's/[[:space:]]+/ /g')
    if [ -n "$DESCRIPTION" ]; then
        DESCRIPTION=$(echo "$DESCRIPTION" | awk -F'[.!?]' '{print $1}' | sed -e 's/^[ \t]*//;s/[ \t]*$//')
    fi
    [ -z "$DESCRIPTION" ] && DESCRIPTION="No description available"
    echo "DESCRIPTION: $DESCRIPTION" >> "$DEBUG_LOG"

    # Extract dependencies (text of links inside p.required)
    DEPENDENCIES=$(xmllint --html --recover --xpath '//p[@class="required"]/a/text()' "$TEMP_FILE" 2>/dev/null | sed -e 's/-[0-9][0-9.]*[0-9]//' | tr '\n' ' ' | sed -e 's/  */ /g' -e 's/^ *//;s/ *$//' | tr '[:upper:]' '[:lower:]')
# Extract recommended dependencies text from <p class="recommended"> links
RECOMMENDED_DEP=$(xmllint --html --recover --xpath '//p[@class="recommended"]/a/@title' "$TEMP_FILE" 2>/dev/null | \
    sed -E 's/title="([^"]+)"/\1\n/g' | \
    sed -E 's/-[0-9][0-9.]*[0-9]//g' | \
    tr '\n' ' ' | \
    sed -E 's/  */ /g' | \
    tr '[:upper:]' '[:lower:]' | \
    sed -E 's/,//g' | \
    sed -E 's/ and / /g' | \
    sed -E 's/ $//')

# If you want to combine required and recommended dependencies:
DEPENDENCIES="$DEPENDENCIES $RECOMMENDED_DEP"
DEPENDENCIES=$(echo "$DEPENDENCIES" | sed -E 's/  */ /g' | sed -E 's/^ *//;s/ *$//')

    #[ -z "$DEPENDENCIES" ] && DEPENDENCIES="none"
    echo "DEPENDENCIES: $DEPENDENCIES" >> "$DEBUG_LOG"

    # Extract source URL (first tarball link)
    SOURCE_URL=$(xmllint --html --recover --xpath '//a[@class="ulink" and contains(@href, ".tar.")]/@href' "$TEMP_FILE" 2>/dev/null | sed -e 's/href="//' -e 's/"$//' | head -n1)
    [ -z "$SOURCE_URL" ] && SOURCE_URL=""
    echo "SOURCE_URL: $SOURCE_URL" >> "$DEBUG_LOG"

    # Extract user-level build commands (inside pre.userinput > kbd.command)
    BUILD_INSTRUCTIONS=$(xmllint --html --recover --xpath '//pre[@class="userinput"]/kbd[@class="command"]/text()' "$TEMP_FILE" 2>/dev/null)
    BUILD_INSTRUCTIONS=$(echo "$BUILD_INSTRUCTIONS" | sed -e 's/&amp;/\&/g' -e 's/&lt;/</g' -e 's/&gt;/>/g' -e 's/&quot;/"/g')
    echo "User-level build commands:" >> "$DEBUG_LOG"
    echo "$BUILD_INSTRUCTIONS" >> "$DEBUG_LOG"

    # Extract root-level build commands (inside pre.root > kbd.command)
    ROOT_MAKES=$(xmllint --html --recover --xpath '//pre[@class="root"]/kbd[@class="command"]/text()' "$TEMP_FILE" 2>/dev/null)
    if [ -z "$ROOT_MAKES" ]; then
        # fallback: extract all text inside pre.root
        ROOT_MAKES=$(xmllint --html --recover --xpath 'string(//pre[@class="root"])' "$TEMP_FILE" 2>/dev/null)
    fi
    ROOT_MAKES=$(echo "$ROOT_MAKES" | sed -e 's/&amp;/\&/g' -e 's/&lt;/</g' -e 's/&gt;/>/g' -e 's/&quot;/"/g')
    echo "Root-level build commands:" >> "$DEBUG_LOG"
    echo "$ROOT_MAKES" >> "$DEBUG_LOG"

    # Prepare root commands line by line and add DESTDIR=$PKG if needed
    #IFS=$'\n' read -rd '' -a ROOT_ARR <<< "$ROOT_MAKES" || true
    #ROOT_PROCESSED=""
    #for cmd in "${ROOT_ARR[@]}"; do
    #    # skip empty lines
    #    [[ -z "$cmd" ]] && continue
    #    if [[ "$cmd" =~ ^make[[:space:]] ]] && [[ "$cmd" != *"DESTDIR="* ]]; then
    #        cmd=$(echo "$cmd" | sed 's/^make /make DESTDIR=$PKG /')
    #    fi
    #    ROOT_PROCESSED+="$cmd"$'\n'
    #done

    # Combine user and root commands

EOF_COMMANDS=$(xmllint --html --recover --xpath '//pre[@class="root"]/kbd[@class="command"]/node()' "$TEMP_FILE" 2>/dev/null | \
                sed -e 's/<code class="literal">\(.*\)<\/code>/\1/' | \
                perl -0777 -pe 's/<code class="literal">(.+?)<\/code>/\1/sg' | \
                perl -0777 -pe 's/.*?<kbd class="command">(.+?)<\/kbd>.*/\1/sg' | \
                sed -e 's/&amp;/\&/g' -e 's/&lt;/</g' -e 's/&gt;/>/g' -e 's/&quot;/"/g')
if [ -z "$EOF_COMMANDS" ]; then
    EOF_COMMANDS=$(xmllint --html --recover --xpath 'string(//pre[@class="root"])' "$TEMP_FILE" 2>/dev/null | \
                    sed -e 's/<code class="literal">\(.*\)<\/code>/\1/' | \
                    sed -e 's/&amp;/\&/g' -e 's/&lt;/</g' -e 's/&gt;/>/g' -e 's/&quot;/"/g')
fi

# Clean and format commands
FORMATTED_COMMANDS=$(echo "$EOF_COMMANDS" | sed -e 's/^[ \t]*//' -e 's/[ \t]*$//' | grep -v '^$')


    ALL_COMMANDS=$(printf "%s\n%s" "$BUILD_INSTRUCTIONS" "$ROOT_PROCESSED" "$FORMATTED_COMMANDS")

    # Clean and format commands nicely
    BUILD_COMMANDS=$(echo "$ALL_COMMANDS" | sed -e 's/^[ \t]*//' -e 's/[ \t]*$//' | grep -v '^$' | sed -e 's/&&$//' -e 's/&& */&& \\\n        /g')
#    | grep -v "^$" \
#    | sed -e 's/&&$//' -e 's/&& */&& \\\n        /g' \
#    | sed -E \
#        -e '/^make(\s*(&&|$))/!s/^make\s+(.*)$/make DESTDIR=\$PKG \1/' \
#        -e '/^ninja(\s*(&&|$))/!s/^ninja\s+(.*)$/DESTDIR=\$PKG ninja \1/')

    # Write spkgbuild file
    cat << EOF > "$output_file"
# description   : $DESCRIPTION
# depends       : $DEPENDENCIES

name=$NAME
version=$VERSION
release=1
source="$SOURCE_URL"
options="!checksum"

build() {
        cd \$name-\$version
        $BUILD_COMMANDS
}
EOF

    echo "spkgbuild generated in $output_file" >> "$DEBUG_LOG"
}

extract_package_info "$PAGE_URL" "$OUTPUT_FILE"

rm "$TEMP_FILE"
sed -Ei 's/^make(\s+)/make DESTDIR=\$PKG\1/' spkgbuild
sed -Ei 's/^ninja(\s+)/DESTDIR=\$PKG ninja\1/' spkgbuild
echo "spkgbuild file generated: $OUTPUT_FILE"
echo "Debug log saved to: $DEBUG_LOG"
